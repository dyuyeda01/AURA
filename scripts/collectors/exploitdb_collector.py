# scripts/collectors/exploitdb_collector.py
"""
Exploit-DB lightweight checker.
Attempts a simple HTTP GET to search results and checks for the CVE string.
Wraps network calls in try/except to avoid crashing the pipeline.
"""

import requests
import time

# Use the Exploit-DB search page. Be mindful of rate-limits and politeness.
EXPLOIT_DB_SEARCH = "https://www.exploit-db.com/search?cve={cve}"

def has_public_poc(cve: str) -> bool:
    """
    Return True if a quick search suggests a public PoC exists for the CVE.
    This is a heuristic and not exhaustive. On network errors, returns False.
    """
    try:
        # Add a small pause to be polite to the remote server if called in a loop
        time.sleep(0.25)
        r = requests.get(EXPLOIT_DB_SEARCH.format(cve=cve), timeout=15, headers={
            "User-Agent": "AURA/1.0 (+https://example.com) - vulnerability proof of concept checker"
        })
        # If the server forcibly closes connection, requests will raise; catch below
        if r.status_code >= 400:
            return False
        text = r.text.lower()
        return cve.lower() in text
    except Exception:
        # Any exception (timeout, remote disconnect, etc.) -> treat as no public PoC detected
        return False
